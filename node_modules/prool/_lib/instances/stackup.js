import { platform } from 'node:os';
import { defineInstance } from '../instance.js';
import { execa } from '../processes/execa.js';
/**
 * Defines an Anvil instance.
 *
 * @example
 * ```ts
 * const instance = stackup({
 *  ethClientUrl: 'http://localhost:8545',
 *  port: 4337,
 *  privateKey: '0x...'
 * })
 * await instance.start()
 * // ...
 * await instance.stop()
 * ```
 */
export const stackup = defineInstance((parameters) => {
    const args = (parameters || {});
    const host = 'localhost';
    const name = 'stackup';
    const process = execa({ name });
    return {
        _internal: {
            args,
            get process() {
                return process._internal.process;
            },
        },
        host,
        name,
        port: args.port ?? 4337,
        async start({ port = args.port }, options) {
            const args_ = [
                ...(platform() === 'linux' ? ['--net', 'host'] : []),
                '--add-host',
                'host.docker.internal:host-gateway',
                '--add-host',
                'localhost:host-gateway',
                '-p',
                `${port}:${port}`,
                '-e',
                `ERC4337_BUNDLER_PORT=${port}`,
                ...Object.entries(args).flatMap(([key, value]) => {
                    if (key === 'port')
                        return [];
                    if (value === undefined)
                        return [];
                    if (key === 'ethClientUrl')
                        value = value.replaceAll(/127\.0\.0\.1|0\.0\.0\.0/g, 'host.docker.internal');
                    if (key === 'privateKey')
                        value = value.replace('0x', '');
                    return [
                        '-e',
                        `ERC4337_BUNDLER_${key
                            .replace(/([a-z])([A-Z])/g, '$1_$2')
                            .toUpperCase()}=${value}`,
                    ];
                }),
                'stackupwallet/stackup-bundler:latest',
                '/app/stackup-bundler',
                'start',
                '--mode',
                'private',
            ];
            return await process.start(($) => $ `docker run ${args_}`, {
                ...options,
                resolver({ process, resolve, reject }) {
                    process.stderr.on('data', async (data) => {
                        const message = data.toString();
                        // For some reason, `stackup-bundler` logs to stderr. So we have to try
                        // and dissect what is an error, and what is not. ðŸ˜…
                        if (message.includes('Set nextTxnTs to'))
                            setTimeout(() => resolve(), 100);
                        else if (message
                            .toLowerCase()
                            .match(/panic|error|connection refused|address already in use/))
                            reject(data);
                    });
                },
            });
        },
        async stop() {
            await process.stop();
        },
    };
});
//# sourceMappingURL=stackup.js.map