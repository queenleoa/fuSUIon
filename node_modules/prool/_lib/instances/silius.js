import { platform } from 'node:os';
import { rmSync } from 'node:fs';
import { defineInstance } from '../instance.js';
import { execa } from '../processes/execa.js';
import { toArgs } from '../utils.js';
/**
 * Defines an Anvil instance.
 *
 * @example
 * ```ts
 * const instance = silius({
 *  port: 4337,
 * })
 * await instance.start()
 * // ...
 * await instance.stop()
 * ```
 */
export const silius = defineInstance((parameters) => {
    const args = (parameters || {});
    const { dataDir = '.local', mnemonicPath, port: _, ...rest } = args;
    const host = 'localhost';
    const name = 'silius';
    const process = execa({ name });
    let port = args.port ?? 4000;
    return {
        _internal: {
            args,
            get process() {
                return process._internal.process;
            },
        },
        host,
        name,
        port,
        async start({ port: port_ = port }, options) {
            port = port_;
            const args_ = [
                ...(platform() === 'linux' ? ['--net', 'host'] : []),
                '--add-host',
                'host.docker.internal:host-gateway',
                '--add-host',
                'localhost:host-gateway',
                '-p',
                `${port}:${port}`,
                '-v',
                `${mnemonicPath}:/data/silius/mnemonic`,
                '-v',
                `./${dataDir}/${port_}/db:/data/silius/db`,
                'ghcr.io/silius-rs/silius:latest',
                'node',
                '--datadir',
                'data/silius',
                '--mnemonic-file',
                'data/silius/mnemonic',
                '--http',
                '--ws',
                ...toArgs({
                    ...rest,
                    beneficiary: rest.beneficiary ?? '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
                    bundler: {
                        ...rest.bundler,
                        addr: rest.bundler?.addr ?? '0.0.0.0',
                    },
                    entryPoints: rest.entryPoints ?? [
                        '0x0000000071727De22E5E9d8BAf0edAc6f37da032',
                    ],
                    ethClientAddress: rest.ethClientAddress?.replaceAll(/127\.0\.0\.1|0\.0\.0\.0/g, 'host.docker.internal'),
                    ethClientProxyAddress: rest.ethClientProxyAddress?.replaceAll(/127\.0\.0\.1|0\.0\.0\.0/g, 'host.docker.internal'),
                    http: {
                        ...rest.http,
                        addr: rest.http?.addr ?? '0.0.0.0',
                        api: rest.http?.api ?? ['eth', 'debug', 'web3'],
                        port,
                    },
                    metrics: {
                        ...rest.metrics,
                        addr: rest.metrics?.addr ?? '0.0.0.0',
                    },
                    uopool: {
                        ...rest.uopool,
                        addr: rest.uopool?.addr ?? '0.0.0.0',
                    },
                    ws: {
                        ...rest.ws,
                        addr: rest.ws?.addr ?? '0.0.0.0',
                        api: rest.ws?.api ?? ['eth', 'debug', 'web3'],
                        port: rest.ws?.port ?? 4001,
                    },
                }),
            ];
            return await process.start(($) => $ `docker run ${args_}`, {
                ...options,
                resolver({ process, resolve, reject }) {
                    process.stdout.on('data', (data) => {
                        const message = data.toString();
                        if (message.includes('Started bundler JSON-RPC server'))
                            resolve();
                    });
                    process.stderr.on('data', (data) => {
                        if (data.toString().includes('WARNING'))
                            return;
                        reject(data);
                    });
                },
            });
        },
        async stop() {
            try {
                rmSync(`${dataDir}/${port}`, { recursive: true, force: true });
            }
            catch { }
            await process.stop();
        },
    };
});
//# sourceMappingURL=silius.js.map