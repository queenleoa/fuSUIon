export type SiliusParameters = {
    /**
     * The bundler beneficiary address.
     */
    beneficiary?: string | undefined;
    /**
     * The bundle interval in seconds.
     * @default 10
     */
    bundleInterval?: number | undefined;
    bundler?: {
        /**
         * Bundler gRPC address to listen on.
         * @default '127.0.0.1'
         */
        addr?: string | undefined;
        /**
         * Bundler gRPC port to listen on.
         * @default 3003
         */
        port?: number | undefined;
    } | undefined;
    /**
     * The chain id.
     * @default 1
     */
    chain?: number | undefined;
    /**
     * Path to the data directory.
     */
    dataDir?: string | undefined;
    discovery?: {
        /**
         * The udp4 port to broadcast to peers in order to reach back for discovery.
         * @default 9000
         */
        port?: number | undefined;
    } | undefined;
    /**
     * Indicates whether the access list is enabled.
     */
    enableAccessList?: boolean | undefined;
    /**
     * Indicates whether the P2P mode is enabled.
     */
    enableP2p?: boolean | undefined;
    /**
     * Indicates whether the metrics are enabled.
     */
    enableMetrics?: boolean | undefined;
    /**
     * The entry points for the bundler.
     */
    entryPoints?: string[] | undefined;
    /**
     * RPC URL of the execution client.
     */
    ethClientAddress?: string | undefined;
    /**
     * Ethereum execution client proxy HTTP RPC endpoint.
     */
    ethClientProxyAddress?: string | undefined;
    http?: {
        /**
         * HTTP address to listen on.
         * @default '127.0.0.1'
         */
        addr?: string | undefined;
        /**
         * Configures the HTTP RPC API modules
         * @default 'eth'
         */
        api?: string[] | undefined;
        /**
         * Configures the allowed CORS domains.
         * @default '*'
         */
        corsdomain?: string[] | undefined;
        /**
         * HTTP port to listen on.
         * @default 3000
         */
        port?: number | undefined;
    } | undefined;
    /**
     * Maximum gas for verification.
     * @default 5000000
     */
    maxVerificationGas?: bigint | undefined;
    metrics?: {
        /**
         * Metrics address to listen on.
         * @default '127.0.0.1'
         */
        addr?: string | undefined;
        /**
         * Metrics port to listen on.
         * @default 3030
         */
        port?: number | undefined;
    } | undefined;
    /**
     * Minimum balance for the beneficiary account.
     * @default 100000000000000000 wei
     */
    minBalance?: bigint | undefined;
    /**
     * Minimum priority fee per gas.
     * @default 0
     */
    minPriorityFeePerGas?: bigint | undefined;
    /**
     * Minimum stake required for entities.
     * @default 1
     */
    minStake?: number | undefined;
    /**
     * Path to the mnemonic file.
     */
    mnemonicPath: string | undefined;
    /**
     * The path to the file where the p2p private key is stored.
     */
    nodekey?: string | undefined;
    /**
     * The path to the file where the p2p enr is stored.
     */
    nodeenr?: string | undefined;
    p2p?: {
        /**
         * Sets the p2p listen address
         * @default '0.0.0.0'
         */
        addr?: string | undefined;
        /**
         * The ipv4 address to broadcast to peers about which address we are listening on.
         */
        baddr?: string | undefined;
        /**
         * The tcp4 port to boardcast to peers in order to reach back for discovery.
         * @default 9000
         */
        bport?: number | undefined;
    } | undefined;
    /**
     * Poll interval event filters and pending transactions in milliseconds.
     * @default 500
     */
    pollInterval?: number | undefined;
    /**
     * Port to start the instance on.
     */
    port?: number | undefined;
    /**
     * Sets the send bundle mode.
     * @default "ethereum-client"
     */
    sendBundleMode?: string | undefined;
    uopool?: {
        /**
         * UoPool gRPC address to listen on.
         * @default '127.0.0.1'
         */
        addr?: string | undefined;
        /**
         * UoPool gRPC port to listen on.
         * @default 3002
         */
        port?: number | undefined;
    } | undefined;
    /**
     * Sets the UoPool mode.
     */
    uopoolMode?: string | undefined;
    /**
     * Sets the verbosity level.
     * @default 2
     */
    verbosity?: number | undefined;
    /**
     * Addresses of whitelisted entities.
     */
    whitelist?: string[] | undefined;
    ws?: {
        /**
         * WS address to listen on.
         * @default '127.0.0.1'
         */
        addr?: string | undefined;
        /**
         * Configures the HTTP RPC API modules
         * @default 'eth'
         */
        api?: string[] | undefined;
        /**
         * Configures the allowed WS origins.
         * @default '*'
         */
        origins?: string[] | undefined;
        /**
         * WS port to listen on.
         * @default 3001
         */
        port?: number | undefined;
    } | undefined;
};
/**
 * Defines an Anvil instance.
 *
 * @example
 * ```ts
 * const instance = silius({
 *  port: 4337,
 * })
 * await instance.start()
 * // ...
 * await instance.stop()
 * ```
 */
export declare const silius: import("../instance.js").DefineInstanceReturnType<{
    args: SiliusParameters;
    readonly process: import("../processes/execa.js").Process_internal;
}, SiliusParameters | undefined>;
//# sourceMappingURL=silius.d.ts.map