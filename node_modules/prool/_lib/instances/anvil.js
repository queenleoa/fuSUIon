import { defineInstance } from '../instance.js';
import { execa } from '../processes/execa.js';
import { toArgs } from '../utils.js';
/**
 * Defines an Anvil instance.
 *
 * @example
 * ```ts
 * const instance = anvil({ forkRpcUrl: 'https://cloudflare-eth.com', port: 8546 })
 * await instance.start()
 * // ...
 * await instance.stop()
 * ```
 */
export const anvil = defineInstance((parameters) => {
    const { binary = 'anvil', ...args } = parameters || {};
    const name = 'anvil';
    const process = execa({ name });
    return {
        _internal: {
            args,
            get process() {
                return process._internal.process;
            },
        },
        host: args.host ?? 'localhost',
        name,
        port: args.port ?? 8545,
        async start({ port = args.port }, options) {
            return await process.start(($) => $({
                env: {
                    FOUNDRY_DISABLE_NIGHTLY_WARNING: 'true',
                },
            }) `${binary} ${toArgs({ ...args, port })}`, {
                ...options,
                // Resolve when the process is listening via a "Listening on" message.
                resolver({ process, reject, resolve }) {
                    process.stdout.on('data', (data) => {
                        const message = data.toString();
                        if (message.includes('Listening on'))
                            resolve();
                    });
                    process.stderr.on('data', (data) => {
                        const message = data.toString();
                        if (message.includes('Warning'))
                            return;
                        reject(message);
                    });
                },
            });
        },
        async stop() {
            await process.stop();
        },
    };
});
//# sourceMappingURL=anvil.js.map