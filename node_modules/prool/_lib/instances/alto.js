import { resolve } from 'node:path';
import { defineInstance } from '../instance.js';
import { execa } from '../processes/execa.js';
import { toArgs } from '../utils.js';
/**
 * Defines an Alto instance.
 *
 * @example
 * ```ts
 * const instance = alto({
 *  entrypoints: ['0x0000000071727De22E5E9d8BAf0edAc6f37da032'],
 *  rpcUrl: `http://localhost:8545`,
 *  executorPrivateKeys: ['0x...'],
 * })
 * await instance.start()
 * // ...
 * await instance.stop()
 * ```
 */
export const alto = defineInstance((parameters) => {
    const { ...args } = (parameters || {});
    const name = 'alto';
    const process = execa({ name });
    return {
        _internal: {
            args,
            get process() {
                return process._internal.process;
            },
        },
        host: 'localhost',
        name,
        port: args.port ?? 3000,
        async start({ port = args.port ?? 3000 }, options) {
            const binary = (() => {
                if (args.binary)
                    return [args.binary];
                const libPath = ('resolve' in import.meta
                    ? import.meta.resolve('@pimlico/alto').split('file:')[1]
                    : require.resolve('@pimlico/alto'));
                return ['node', resolve(libPath, '../cli/alto.js')];
            })();
            await process.start(($) => $ `${binary} ${toArgs({ port, ...args })}`, {
                ...options,
                // Resolve when the process is listening via a "Server listening at" message.
                resolver({ process, reject, resolve }) {
                    process.stdout.on('data', (data) => {
                        const message = data.toString();
                        if (message.includes('Server listening at'))
                            resolve();
                    });
                    process.stderr.on('data', reject);
                },
            });
        },
        async stop() {
            await process.stop();
        },
    };
});
//# sourceMappingURL=alto.js.map