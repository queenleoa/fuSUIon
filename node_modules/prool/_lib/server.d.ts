/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type IncomingMessage, type Server, type ServerResponse } from 'node:http';
import type { AddressInfo } from 'node:net';
import { type DefinePoolParameters } from './pool.js';
export type CreateServerParameters = DefinePoolParameters<number> & ({
    /** Host to run the server on. */
    host?: string | undefined;
    /** Port to run the server on. */
    port: number;
} | {
    host?: undefined;
    port?: undefined;
});
export type CreateServerReturnType = Omit<Server<typeof IncomingMessage, typeof ServerResponse>, 'address'> & {
    address(): AddressInfo | null;
    start(): Promise<() => Promise<void>>;
    stop(): Promise<void>;
};
/**
 * Creates a server that manages a pool of instances via a proxy.
 *
 * @example
 * ```
 * import { createServer } from 'prool'
 * import { anvil } from 'prool/instances'
 *
 * const server = createServer({
 *  instance: anvil(),
 * })
 *
 * const server = await server.start()
 * // Instances accessible at:
 * // "http://localhost:8545/1"
 * // "http://localhost:8545/2"
 * // "http://localhost:8545/3"
 * // "http://localhost:8545/n"
 * // "http://localhost:8545/n/start"
 * // "http://localhost:8545/n/stop"
 * // "http://localhost:8545/n/restart"
 * // "http://localhost:8545/healthcheck"
 * ```
 */
export declare function createServer(parameters: CreateServerParameters): CreateServerReturnType;
//# sourceMappingURL=server.d.ts.map