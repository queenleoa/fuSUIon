import type { Instance } from './instance.js';
type Instance_ = Omit<Instance, 'create'>;
export type Pool<key extends number | string = number | string> = Pick<Map<key, Instance_>, 'entries' | 'keys' | 'forEach' | 'get' | 'has' | 'size' | 'values'> & {
    _internal: {
        instance: Instance_ | ((key: key) => Instance_);
    };
    destroy(key: key): Promise<void>;
    destroyAll(): Promise<void>;
    restart(key: key): Promise<void>;
    start(key: key, options?: {
        port?: number;
    }): Promise<Instance_>;
    stop(key: key): Promise<void>;
    stopAll(): Promise<void>;
};
export type DefinePoolParameters<key extends number | string = number | string> = {
    /** Instance for the pool. */
    instance: Instance | ((key: key) => Instance);
    /** The maximum number of instances that can be started. */
    limit?: number | number;
};
export type DefinePoolReturnType<key extends number | string = number | string> = Pool<key>;
/**
 * Defines an instance pool. Instances can be started, cached, and stopped against an identifier.
 *
 * @example
 * ```
 * const pool = definePool({
 *  instance: anvil(),
 * })
 *
 * const instance_1 = await pool.start(1)
 * const instance_2 = await pool.start(2)
 * const instance_3 = await pool.start(3)
 * ```
 */
export declare function definePool<key extends number | string = number>(parameters: DefinePoolParameters<key>): DefinePoolReturnType<key>;
export {};
//# sourceMappingURL=pool.d.ts.map