import { execa as exec } from 'execa';
import { stripColors } from '../utils.js';
export function execa(parameters) {
    const { name } = parameters;
    const errorMessages = [];
    let process;
    async function stop(signal) {
        const killed = process.kill(signal);
        if (!killed)
            return;
        return new Promise((resolve) => process.on('close', resolve));
    }
    return {
        _internal: {
            get process() {
                return process;
            },
        },
        name,
        start(command, { emitter, resolver, status }) {
            const { promise, resolve, reject } = Promise.withResolvers();
            process = command(exec({
                cleanup: true,
                reject: false,
            }));
            resolver({
                process,
                async reject(data) {
                    await stop();
                    reject(new Error(`Failed to start process "${name}": ${data.toString()}`));
                },
                resolve() {
                    emitter.emit('listening');
                    return resolve();
                },
            });
            process.stdout.on('data', (data) => {
                const message = stripColors(data.toString());
                emitter.emit('message', message);
                emitter.emit('stdout', message);
            });
            process.stderr.on('data', async (data) => {
                const message = stripColors(data.toString());
                errorMessages.push(message);
                if (errorMessages.length > 20)
                    errorMessages.shift();
                emitter.emit('message', message);
                emitter.emit('stderr', message);
            });
            process.on('close', () => process.removeAllListeners());
            process.on('exit', (code, signal) => {
                emitter.emit('exit', code, signal);
                if (!code) {
                    process.removeAllListeners();
                    if (status === 'starting')
                        reject(new Error(`Failed to start process "${name}": ${errorMessages.length > 0
                            ? `\n\n${errorMessages.join('\n')}`
                            : 'exited'}`));
                }
            });
            return promise;
        },
        async stop() {
            process.removeAllListeners();
            await stop();
        },
    };
}
//# sourceMappingURL=execa.js.map